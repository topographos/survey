---
title: "potential"
author: "Michal Michalski"
format: 
  html:
    code-fold: true
    toc: true
    code-overflow: wrap
editor: visual
execute: 
  warning: false
---

## Method

## Potenital

### Packages

```{r}
library(sf)
library(dplyr)
library(tmap)
library(potential)
```

### Data

```{r}

# load survey
survey = st_read("../data/vect/data.gpkg",  layer = "njs_survey", quiet = TRUE)

# load sites data
sites = readRDS("../data/tab/njs_sites_LONG_SF.rds")

# filter Bronze Age sites
sites_ba = sites %>% filter(time_start == -1400)

# filter iron age sitees
sites_ia = sites %>% filter(time_start == -900)

# map BA sites
map_ba = tm_shape(sites_ba) +
  tm_dots(size = 0.5, alpha = 0.5) +
  tm_layout("Bronze Age")

# map IA sites
map_ia = tm_shape(sites_ia) +
  tm_dots(size = 0.5, alpha = 0.5) +
  tm_layout("Iron Age")

# combine two maps
tmap_arrange(map_ba,map_ia, nrow = 1)
```

### Grid

```{r}

grid = create_grid(x = sites, res = 250)

tm_shape(grid) +
  tm_dots(col = "grey", alpha = 0.5) +
tm_shape(sites_ba) +
  tm_dots(size = 0.5, alpha = 0.8, col = "firebrick1") +
tm_shape(sites_ia) +
  tm_dots(size = 0.5, alpha = 0.5, col = "steelblue4") +
tm_legend()
  
  

```

### Create Distance Matrix

```{r}

#bronze age sites
d_ba <- create_matrix(x = sites_ba, y = grid)

#bronze age sites
d_ia <- create_matrix(x = sites_ia, y = grid)

# matrix distances
d_ia[1:5,1:5]


```

### Function

Model interaction

```{r}

plot_inter(fun = "e", span = 2000, beta = 2, limit = 5000)



```

### Compute Potential

```{r}

# potential for bronze age
grid$pot_ba <- potential(x = sites_ba, 
                         y = grid, 
                         d = d_ba,
                         var = "size_ha", 
                         fun = "e",
                         span = 2000, 
                         beta = 2
                         )

# potential for iron age
grid$pot_ia <- potential(x = sites_ia, 
                         y = grid, 
                         d = d_ia,
                         var = "size_ha", 
                         fun = "e",
                         span = 2000, 
                         beta = 2
                         )


```

Compute Potential

```{r}
equipot_ba =  equipotential(x = grid, 
                          var = "pot_ba", 
                          nclass = 10,
                          mask = survey
                          )

equipot_ia =  equipotential(x = grid, 
                          var = "pot_ia", 
                          nclass = 10,
                          mask = survey
                          )

ba = tm_shape(equipot_ba) +
  tm_polygons(col = "center") +
  tm_layout(title = "Bronze Age")

ia = tm_shape(equipot_ia) +
  tm_polygons(col = "center") +
  tm_layout(title = "Iron Age")

tmap_arrange(ba,ia)
```

### Automate for all periods - TO DO

```{r}
#| eval: false
#| echo: false

# split sites into list with elements by time blocks
sites_ls = split(sites, sites$time_start)

# calculate grid for with resolution 250 m
grid = create_grid(x = sites, res = 500)

# calculate distance matrix for every element in the list
result = list()

for (i in 1:length(sites_ls)){
  
  dm = create_matrix(x = sites_ls[[i]], y = grid)
  
  result[[i]] = dm
}

# or 
result  = lapply(sites_ls, create_matrix, grid)

new = list()

# compute potential

for (i in 1:length(result)){

  for (j in 1:length(sites_ls)){
    
    potential(x = sites_ls[[j]], 
              y = grid, 
              d = result[[i]],
              var = "size_ha", 
              fun = "e",
              span = 2000, 
              beta = 2
              )
    
  }
}

```
